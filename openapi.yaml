openapi: 3.0.3
info:
  title: TripTracker API
  version: "1.0.0"
  description: API for TripTracker PWA - trips, shifts, goals, reports, export
servers:
  - url: https://api.example.com
    description: Production
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    TripStart:
      type: object
      required: [event,userId,shiftId,tripId,timestamp,startLocation,clientLocale]
      properties:
        event:
          type: string
          example: trip.start
        userId:
          type: string
        shiftId:
          type: string
        tripId:
          type: string
        timestamp:
          type: string
          format: date-time
        startLocation:
          type: object
          properties:
            lat: { type: number }
            long: { type: number }
        clientLocale:
          type: string
    TripEndConfirm:
      type: object
      required: [event,userId,shiftId,tripId,timestamp,valueAmount,startTimestamp,endTimestamp]
      properties:
        event:
          type: string
          example: trip.endConfirm
        userId: { type: string }
        shiftId: { type: string }
        tripId: { type: string }
        timestamp: { type: string, format: date-time }
        valueAmount: { type: number }
        startTimestamp: { type: string, format: date-time }
        endTimestamp: { type: string, format: date-time }
        durationSeconds: { type: integer }
        distanceMeters: { type: integer }
        startLocation:
          type: object
          properties:
            lat: { type: number }
            long: { type: number }
        endLocation:
          type: object
          properties:
            lat: { type: number }
            long: { type: number }
        startPointName: { type: string }
        endPointName: { type: string }
        clientLocale: { type: string }
        retryCount: { type: integer, default: 0 }
    ShiftSummary:
      type: object
      required: [event,shiftId,userId,startTimestamp,endTimestamp,totalDurationSeconds,totalDistanceMeters,totalAmount,tripsCount]
      properties:
        event: { type: string, example: shift.summary }
        shiftId: { type: string }
        userId: { type: string }
        startTimestamp: { type: string, format: date-time }
        endTimestamp: { type: string, format: date-time }
        totalDurationSeconds: { type: integer }
        totalDistanceMeters: { type: integer }
        totalAmount: { type: number }
        tripsCount: { type: integer }
    GoalSave:
      type: object
      required: [event,dateKey,targetAmount,targetHours,lastUpdatedAt]
      properties:
        event: { type: string, example: goal.save }
        dateKey: { type: string, pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$" }
        targetAmount: { type: number }
        targetHours: { type: number }
        targetMonthlyTrips: { type: integer }
        carriedOverAmount: { type: number, default: 0 }
        carriedOverHours: { type: number, default: 0 }
        lastUpdatedAt: { type: string, format: date-time }
        source: { type: string, enum: [local,server] }
paths:
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  expiresAt: { type: string }
        "401":
          description: Unauthorized
  /trips/start:
    post:
      summary: Start a trip
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripStart'
      responses:
        "200":
          description: Trip started
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  tripId: { type: string }
                  serverTimestamp: { type: string }
        "400":
          $ref: '#/components/schemas/ErrorResponse'
  /trips/{tripId}/end:
    post:
      summary: End a trip
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tripId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripEndConfirm'
      responses:
        "200":
          description: Trip saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  tripId: { type: string }
                  savedAt: { type: string }
        "422":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /shifts/{shiftId}/summary:
    post:
      summary: Submit shift summary
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: shiftId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftSummary'
      responses:
        "200":
          description: Shift accepted
  /goals/sync:
    post:
      summary: Sync goals (batch)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GoalSave'
      responses:
        "200":
          description: Sync results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        dateKey: { type: string }
                        status: { type: string }
                        serverUpdatedAt: { type: string }
  /reports:
    get:
      summary: Get reports (shifts and trips)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date }
        - in: query
          name: to
          schema: { type: string, format: date }
        - in: query
          name: groupBy
          schema: { type: string, enum: [shift,day] }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 50 }
      responses:
        "200":
          description: report
          content:
            application/json:
              schema:
                type: object
                properties:
                  shifts:
                    type: array
                    items:
                      type: object
                      properties:
                        shiftId: { type: string }
                        date: { type: string }
                        startTime: { type: string }
                        endTime: { type: string, nullable: true }
                        totalAmount: { type: number }
                        totalHours: { type: string }
                        status: { type: string }
                        trips:
                          type: array
                          items:
                            type: object
                            properties:
                              tripId: { type: string }
                              startTimestamp: { type: string }
                              endTimestamp: { type: string }
                              valueAmount: { type: number }
                              durationSeconds: { type: integer }
                              distanceMeters: { type: integer }
  /reports/export:
    post:
      summary: Request export (PDF/HTML/CSV/JSON)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from: { type: string }
                to: { type: string }
                format: { type: string, enum: [pdf,html,csv,json] }
                include: 
                  type: array
                  items: { type: string, enum: [shifts,trips,summary] }
                locale: { type: string, example: "ar-SA" }
      responses:
        "202":
          description: Export queued
          content:
            application/json:
              schema:
                type: object
                properties:
                  exportId: { type: string }
        "200":
          description: immediate file stream (optional)
